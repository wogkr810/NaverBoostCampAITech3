- (Python 6강) numpy : NUMerical PYthon
  - 일반 리스트에 비해 빠르고 메모리 효율 적
  - **반복문 없이** 데이터 배열에 대한 처리를 지원함
  - ndarray : Numpy Dimension ARRAY
  - **numpy array**는 하나의 data type만 배열에 넣을 수 있음
  - **리스트와 가장 큰 차이 점 -> 파이썬의 장점인 Dynamic Typing Not Supported**
  - Numpy vs Array
    - array의 경우 값을 메모리에 저장 -> -5~256 값의 경우 is 하면 True
    - numpy의 경우는 값을 그대로 저장하기에 is 하면 False
  - [][]만 지원하는 리스트와 달리, [,] 도 지원!
  - arange : range와 달리 step에 float 도가능
  - zeros, ones -> 0,1로 채운 ndarray
  - empty : shape 만 주어지고 비어있는 ndarray 생성 (memory initialization 이 되지 않음)
  - Shape
    - Ex : (4,3,4) -> 뒤로 밀리는 느낌 , 3 x 4 짜리가 4층 있다!
    - 10 x 1 하려면 shape (10,) 해야 함
  - eye : Identity matrix의 경우 정방행렬이 아니어도 가능 + 시작이 되는 row와 col 의 index 지정 가능
  - diag : 대각성분 -> 이것또한 시작되는 인덱스 지정 가능
  - axis : 연산의 기준이 되는 축 (정말 중요!)
    - Ex: (3,4)면 axis가 (0,1)순서 , dimension은 뒤로 밀림! // axis=1 이면 (3,)로 출력
  - stack
    - vstack : 위아래로 stack  , axis=0
    - hstack : 옆으로 stack , axis=1
  - 브로드캐스팅(BroadCasting) : Shape 이 다른 배열간 연산을 지원하는 기능
    - Ex : Matrix + Scalar -> 매트릭스 원소에 다 스칼라가 더해지는 등의 연산
    - EX : Matrix + Vector -> 알아서 shape 맞춰서 펼쳐진 후 연산
  - where
    - 1. ~.where(condition,true,false) -> condition 맞으면 true값으로, 틀리면 false로 변환
    - 2. ~.where(값) -> index값 반환
  - arg
    - min,max -> 최대 최소값의 인덱스
    - argsort -> index들로 정렬
  - index
    - Boolean index : True , False 로 해당되는 값 출력 , 사이즈 같아야 함! 
    - Fancy index : 정수 인덱스에 해당하는 값 출력, 사이즈 달라도 됨! + A.take(B)로도 사용 가능
  - 특징
    - 속도 : for loop < list Comprehension < numpy
    - 하지만, 파이썬의 가장 큰 특징인 **Dynamic Typing** 포기 !
    
- (Python 7-1강) pandas I & (Python 7-2강) pandas II : Python계의 엑셀
  - 데이터 타입
    - Series : 열 한 줄 / dict type
    - DataFrame : 전체
  - 함수
    - astype : 형 변환
    - 추출
      - loc : index location / 인덱스 이름으로 / column에 list 넣어야함
      - iloc : index position / 인덱스 넘버로 / 이게 인덱스 다루는 느낌이 남
    - map(replace) : map 을 이용하여 {Female,Male} -> {0,1}  // replace와 같음
    - apply : 컬럼 단위로 데이터 전체 적용 / applymap : 데이터 전체 (EX: 전부 다 음수)
    - Built-in
      - describe : Numeric Type Data 요약
      - Unique : 유일한 값 리스트로 반환
      - sort_values : 컬럼값을 기준으로 데이터를 sorting
      - dtypes : 데이터 타입
    - Groupby : df.groupby(그룹화할칼럼)(연산할칼럼).sum()
    - Merge : df.merge(data1,data2,on="",how="")
  - 팁
    - DataFrame 도 Transpose 됨 -> 전치로 봐야 보기 쉬움
    - DataFrame은 대부분 함수 적용해도 df가 변하지 않음, 변하게 하려면 inplace = True
    - 오브젝트타입 변수( ex : 성별 ) -> 0,1 로 바꿔서 해야 corr 구할 수 있음
    - 멀티인덱스 -> 레벨별로 인덱스 설정 가능
    - pivot table , crosstab, groupby 비슷 함, groupby가 익숙하니 무난할 듯
   
 
   
