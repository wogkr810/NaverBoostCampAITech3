- (Python 2-4강) String and advanced function concept : 코딩은 팀플
  - 인코딩 : utf-8 주로 사용
  - 메모리 공간에 따라 할당받은 크기가 다름 ( int vs float)
  - raw string : r" ~ " -> 역슬래시(\)안먹힘!
  - 파이선은 call by object reference (객체의 주소가 함수로 전달되는 방식)
  - 지역변수 : 함수 내에서만 사용 vs 전역변수 : 프로그램전체에서 사용 ( 함수내에서 전역변수 사용 시 global 키워드 사용)
  - 지역변수는 전역변수에 영향 주지 않음
  - 재귀함수: 자기자신을 호출
  - docstring : 파이썬 함수에 대한 상세스펙을 사전에 작성하여 소통 가능
  - vscode 에서 docstring 설치 ->깔끔하고 이쁨
  - Type Hint : def type_hint(x : int , y : int ) -> int     <-- 이런식으로
  - 함수 가이드라인
    - 짧게 작성
    - 이름에 역할 들어나게 
    - VO(verb - obejct) 형태로
    - 하나의 함수에는 유사한 역할을 하는 코드만 포함
    - 인자로 받은 값 바꾸지말기 (차라리 복사를 해라!)
    - 들여쓰기 : tab보단 4-space! / 혼합은 안 됨!
  - 코딩 컨벤션
    - 함수명은 소문자
    - 요즘은 black! (연구소 1주차 세미나 참고하기)
    
- (Python 3-1강) Python Data Structure : 여러가지 데이터 타입
  - 스택(stack)
    - 나중에 넣은 데이터를 먼저 반환하도록 설계된 메모리구조 (LIFO)
    - 입력 : pust, 출력 : pop
  - 큐(queue)
    - 먼저 넣은 데이터를 먼저 반환 하도록 설계된 메모리 구조 (FIFO)
    - 스택과 반대되는 개념
  - 튜플(tuple) 
    - 값의 변경이 불가능한 리스트
    - 선언시 [] 가 아닌 () 를 사용
    - 리스트의 연산,인덱싱,슬라이싱 동일하게 사용
    - Why Tuple ? : 프로그램을 작동하는 동안 변경되면 안되는 데이터의 저장( 학번, 이름 우편번호 등등) + 함수의 반환 값등 사용자의 실수에 대한 에러를 사전에 방지
  - 집합(set)
    - 값을 순서없이 저장 및 중복 불허하는 자료형
    - {}로 선언
    - 집합 내 연산
      - add: 원소추가
      - remove: 삭제
      - update : 여러 값 add
      - discard : 삭제
      - claer : 모든 원소 삭제
    - 집한 간 연산
      - 합집합 : union, |
      - 교집합 : intersection , &
      - 차집합 : difference , -
  - 딕셔너리(Dict)
    - 데이터를 저장할 때 구분 지을 수 있는 값을 함께 저장 (Key, Value)
    - 다른 언어에서는 Hash Table 이라는 용어를 사용
    - dict도 {} 사용  (set 과 같지만, dict는 중간에 : 로 비교)
    - dict()로 생성가능
    - 반복문으로 딕셔너리 print하면 tuple 형태로 반환
    - 기능
      - Keys() : 키 값만 출력
      - Values() : value 값만 출력
  - Collections 모듈 : list, tuple, dict 에 대한 python bulit-in 확장 자료 구조 (모듈)
    - Deque : 스택과 큐 지원 모듈
      - 리스트보다 빠른 효율적인 자료구조
    - DefaultDict : dict 타입에 관한 기본 값을 지정, 신규값 생성시 사용하는 방법
      - Ex : d=defaultdict(default_value)
    - Counter : sequence type의 data element의 개수를 dict형태로 반환
      - set의 연산들을 지원함
    - NamedTuple : tuple 형태로 데이터 구조체를 저장하는 방법
      - 저장되는 data의 variable을 사전에 지정해서 저장함
