- (Python 2-4강) String and advanced function concept : 코딩은 팀플
  - 인코딩 : utf-8 주로 사용
  - 메모리 공간에 따라 할당받은 크기가 다름 ( int vs float)
  - raw string : r" ~ " -> 역슬래시(\)안먹힘!
  - 파이선은 call by object reference (객체의 주소가 함수로 전달되는 방식)
  - 지역변수 : 함수 내에서만 사용 vs 전역변수 : 프로그램전체에서 사용 ( 함수내에서 전역변수 사용 시 global 키워드 사용)
  - 지역변수는 전역변수에 영향 주지 않음
  - 재귀함수: 자기자신을 호출
  - docstring : 파이썬 함수에 대한 상세스펙을 사전에 작성하여 소통 가능
  - vscode 에서 docstring 설치 ->깔끔하고 이쁨
  - Type Hint : def type_hint(x : int , y : int ) -> int     <-- 이런식으로
  - 함수 가이드라인
    - 짧게 작성
    - 이름에 역할 들어나게 
    - VO(verb - obejct) 형태로
    - 하나의 함수에는 유사한 역할을 하는 코드만 포함
    - 인자로 받은 값 바꾸지말기 (차라리 복사를 해라!)
    - 들여쓰기 : tab보단 4-space! / 혼합은 안 됨!
  - 코딩 컨벤션
    - 함수명은 소문자
    - 요즘은 black! (연구소 1주차 세미나 참고하기)
    
- (Python 3-1강) Python Data Structure : 여러가지 데이터 타입
  - 스택(stack)
    - 나중에 넣은 데이터를 먼저 반환하도록 설계된 메모리구조 (LIFO)
    - 입력 : pust, 출력 : pop
  - 큐(queue)
    - 먼저 넣은 데이터를 먼저 반환 하도록 설계된 메모리 구조 (FIFO)
    - 스택과 반대되는 개념
  - 튜플(tuple) 
    - 값의 변경이 불가능한 리스트
    - 선언시 [] 가 아닌 () 를 사용
    - 리스트의 연산,인덱싱,슬라이싱 동일하게 사용
    - Why Tuple ? : 프로그램을 작동하는 동안 변경되면 안되는 데이터의 저장( 학번, 이름 우편번호 등등) + 함수의 반환 값등 사용자의 실수에 대한 에러를 사전에 방지
  - 집합(set)
    - 값을 순서없이 저장 및 중복 불허하는 자료형
    - {}로 선언
    - 집합 내 연산
      - add: 원소추가
      - remove: 삭제
      - update : 여러 값 add
      - discard : 삭제
      - claer : 모든 원소 삭제
    - 집한 간 연산
      - 합집합 : union, |
      - 교집합 : intersection , &
      - 차집합 : difference , -
  - 딕셔너리(Dict)
    - 데이터를 저장할 때 구분 지을 수 있는 값을 함께 저장 (Key, Value)
    - 다른 언어에서는 Hash Table 이라는 용어를 사용
    - dict도 {} 사용  (set 과 같지만, dict는 중간에 : 로 비교)
    - dict()로 생성가능
    - 반복문으로 딕셔너리 print하면 tuple 형태로 반환
    - 기능
      - Keys() : 키 값만 출력
      - Values() : value 값만 출력
  - Collections 모듈 : list, tuple, dict 에 대한 python bulit-in 확장 자료 구조 (모듈)
    - Deque : 스택과 큐 지원 모듈
      - 리스트보다 빠른 효율적인 자료구조
    - DefaultDict : dict 타입에 관한 기본 값을 지정, 신규값 생성시 사용하는 방법
      - Ex : d=defaultdict(default_value)
    - Counter : sequence type의 data element의 개수를 dict형태로 반환
      - set의 연산들을 지원함
    - NamedTuple : tuple 형태로 데이터 구조체를 저장하는 방법
      - 저장되는 data의 variable을 사전에 지정해서 저장함
      
- (Python 3-2강) Pythonic code : 파이썬 스타일 코드
  - split & join
    - split: string type의 값을 "기준 값:으로 나눠서 list형태로 반환
    - join : split과 반대로 합치는 것 ex : ''.join(list)
  - list comprehension : 기존 리스트를 사용하여 간단하게 다른 리스트를 만드는 기법
    - Ex : nested list comprehension  : [for i in ~ for j in ~ ] -> 순서대로 for i 다음 for j 
    - pprint : list 출력할때 가로로 나오는 것 세로로 이쁘게 출력하는 라이브러리
    - [[for i ] for j  ] <-의 경우 위와 달리 뒤에 있는 for j 가 먼저 위로 감
      - Ex : [ i+j for i in ["A", "B", "C"] for j in ["C", "E" , "A"] ] -> ["AC",~~~~"CA"] 의 1차원
      - Ex : [[i+j for i in  ["A", "B", "C"]] for j in ["C", "E" , "A"] ] -> [["AC","BC","CC],[~],[~]] 의 2차원
  - Enumerate : list의 element를 추출할 때 번호를 붙여서 추출
    - list의 index의 값을 unpacking
  - zip : 두개의 list의 값을 병렬적으로 추출 함
  - lambda: 함수 이름 없이 함수처럼 쓸 수 있는 익명함수
  - map : 두 개 이상의 list에도 적용 가능함
    - map 쓰고 list로 덮어야 함
  - reduce: map function 과 달리 list에 똑같음 함수를 적용해서 통합 , 대용량의 데이터를 다룰 때
  - Iterable Object : sequence 형 자료형에서 데이터를 순서대로 추출하는 object
    - iter() : 메모리의 위치에 대한 정보만 가지고 있음
    - next(list)로 값을 출력
  - Generator : iterable object를 특수한 형태로 사용해주는 함수
    - element가 사용되는 시점에 값을 메모리에 반환
    - yield를 사용해 한ㅂ너에 하나의 element만 반환
    - 쓰는 시점에 yield가 호출 되는 것 / 평소에는 값을 메모리에 올려놓지 않고 메모리주소 값만 갖고 있음
    - print 할 때만 yield가 값을 던져 주는 느낌
    - Why Use? : sys.getsizeof 하면 확실히 메모리 사이즈가 작음 -> 한번에 메모리 다 올려 놓는 것보다 필요할 때 불러 쓰는게 훨 씬 더 효율적임
    - iterable object에서 next 같은 느낌
    - 대용량 데이터 쓸때는 항상 Generator ! 
    - Generator comprehension : list comprehension과 유사한 형태로 generator 형태의 list 생성 / [] 대신 ()로 표현
  - Function Passing Arguments
    - Keyword arguments : 함수에 입력되는 파라미터의 변수명을 사용, arguments를 넘김
      - 함수 인자에서 함수이름(column="" , row ="") 같은 것
    - Default arguments : 파라미터의 기본값을 사용, 입력하지 않을 경우 기본 값 출력
    - Variable length asterisk : 함수의 파라미터가 정해지지 않을 경우
      - Variable length : 개수가 정해지지 않은 변수를 함수의 파라미터로 사용하는 법, asterisk 기호를 사용하여 파라미터 표시, Tuple 타입으로 입력가능
    - Keyword Variable length asterisk :  파라미터 이름을 따로 지정하지 않고 입력하는 방법, ** 두개 사용하여 함수의 파라미터 표시, 입력된 값은 dict type으로 사용 할 수 있음
      - 순서 : parameter, keyword argument, variable length, keyword variable length
      - 추가적으로 *는 unpacking a container로도 쓰임 : tuple, dict등 자료형에 들어가 있는 값을 unpacking
      - **는 dict타입 unpacking
      
 - (Python 4-1강) Python Object Oriented Programming : 객체지향 프로그래밍
  - 객체 : 실생활에서 일종의 물건, 속성(변수) 및 행동(함수)을 가짐
  - 함수 : snake_case vs 클래스 : CamelCase
  - Magic Method(예약어) 
    - __str__ : print문 했을 때 해당 함수 나옴
    - __add__ : 더해줌
  - self : 생성된 인스턴스 자신을 의미 
    - Ex : class JaeHak(): 으로 정의 했을 때, person=JaeHak() , person.함수() <- person이 self 느낌
  - 객체의 특징
    - 상속: super()
    - 다형성 : Animal class -> cat(animal) & dog(animal) 같이 다양하게 상속 가능 (하나의 객체가 여러 가지 타입 갖을 수 있음)
    - 가시성 : self.__ <- private 변수로 선언 하여 타객체가 접근 못하게 함 / @property를 통해 보이게 할 수 있음
  - decorate : ????????????????????????????
  
  
- (Python 4-2강) Module and Project : 모듈 쓰기!
  - import 하면 모듈 안의 모든 코드가 메모리에 로딩 됨
  - pyc : 파이썬 컴파일러 -> 다음에 쓸 때 미리 메모리에 있으므로 바로 쓸 수 있음
  - from 과 import를 통해 필요한 내용만 골라서 호출 할 수 있음
  - 모듈 불러오는 방법
    - 1.Alias(별칭) 이용 -> import matplotlib.pyplot as plit
    - 2. from ~ import ~    : 쓸 거
    - 3. from 모듈 import * :전체
    - 1번 Alias 써야 어디서 가져왔는지 다른 사람들과 공유할 수 있으므로 가장 추천!
    - Bulit-in Module : random, math , time 등등
    - 패키지(모듈 모음) : 하나의 대형 프로젝트를 만드는 코드 묶음
      - 모듈 import 할 때 폴더여도 모듈 다루듯이 from ~ import 사용 가능
      - 패키지 한꺼번에 설치하면 충돌있으니 가상환경 설정하기(Geopandas 설치 할 때 겪은 오류)
      - pip vs conda : 파이썬은 C 기반언어 -> 컴파일된 코드가 필요함 -> pip는 없기 때문에 conda가 windows에서 장점
        - 윈도우 : conda
        - linux, amac : conda or pip
      - tqdm : 반복문 얼마나 남았는지 시간 확인
- (Python 5-1강) File / Exception / Log Handling : 프로그램 사용할 때 일어나는 흔한 일 들
  - 예외:
    - 예상 가능한 : 정보 잘못입력했을 경우
    - 예상 불가능한 : 인터프리터 과정에서 발생하는 예외
  - 파이썬에서의 예외처리 :
    - try <예외발생가능코드> except <예외 발생시 대응하는 코드>
    - if else 조건문으로도 가능하긴 함, 하지만 except문 권장
    - finally : 예외 발생 여부와 상고나없이 항상 실행됨
    - raise : 필요에 따라 강제로 exception을 발생
    - assert : 특정 조건에 만족하지 않을 경우 예외발생
  - Built-in ERROR (기본적으로 제공하는 예외 많음)
    - Except ZEROdivisonerror : 0으로 숫자 나눌 때 예외처리 
    - Valuerror : 부적절한 값을 가진 인자를 받았을 때
  - 파일(text vs binary) 
    - text파일 vs binary 파일(컴퓨터만 이해할 수 있는 이진법 형식 파일)
    - txt파일로 열리면 text, 한글파일과 같이 메모장에 옮겼을때 메모장 깨지고 중국말 같은거 나오면 binary파일
    - 컴퓨터는 text파일을 처리하기 위해 binary파일로 변환시킴
    - 모든 text파일은 실제로 binary 파일
  - 파일(읽기,쓰기,추가)
    - r(read) : 읽기
    - w(write) : 쓰기 (utf-8과 같은 인코딩 필요)
    - a(append) : 추가
  - 디렉토리 다루기
    - os모듈 / Ex: 예전에 연구소에서 파일폴더 이름 할 때 "이름" + \\ + "파일" <- 이거 하지 말고 import shutil 이후에 os.path.join 하기
    - 요즘에는 pathlib
    - pickle : 파이썬의 객체를 저장하는 빌트인 객체 / 우리가 쓰는 함수나 변수등은 메모리에 있다가 프로그램 종료하면 없어짐 -> 실행중인 정보를 저장하고 불러와서 사용
  - Logging Handiling : 핵을 어떻게 잡냐?
    - 일단은 기록부터! 
    - logging : 파이썬의 기본모듈 
    - 프로그램 진행상황에 따라 다른 레벨의 로그를 출력함
    - Debug -> Info -> Warning -> Error -> Critical / 사용자에겐 보통 warning 부터 알림
    - basicconfig <- 이걸로 로그 알림 레벨 설정하면 됨!
  - 단일 옵션 모음 : 정보를 저장하는 데 설정하는 방법
    - configparser(파일) vs argparser(실행시점)
      - configparser : 프로그램의 실행설정을 file에 저장
      - argparser : console 창에서 프로그램 실행 시 세팅정보를 저장 함
    
  - 
