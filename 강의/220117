- (Python 1-1강) Basic computer class for newbies : 기본적인 컴퓨터에 대한 이해
  - 파일시스템 : os에서 파일을 저장하는 *트리구조* 저장 체계
  - 윈도우 + E  -> 파일 탐색기
  - 디렉토리(폴더) vs 파일
  - 절대경로 : 루트 디렉토리부터 파일위치까지 / 상대경로 : 현재 있는 디렉토리부터 파일까지의 경로
  - 터미널 : 마우스가 아닌 키보드로 명령을 입력하여 프로그램 실행
  - GUI(Graphical user interface) vs CLI(command line interface)
  - CLI: GUI와 달리 text를 사용하여 컴퓨터에 명령을 입력하는 인터페이스 체계
  - 윈도우 : cmd, 윈도우 터미널 / 맥,리눅스 : 터미널
  - 콘솔 = 터미널 = cmd
  - 윈도우 터미널 : 윈도우 + r -> cmd입력 / 윈도우에서는 powershell, cmd 창 등등
  - mkdir : make directory / ..\ : 한칸 앞에 가라 / tab키 : 긴거 바로 나오게 해줌
  - [윈도우 CMD 명령어 목록](https://zetawiki.com/wiki/%EC%9C%88%EB%8F%84%EC%9A%B0_CMD_%EB%AA%85%EB%A0%B9%EC%96%B4_%EB%AA%A9%EB%A1%9D)

- (Python 1-2강) 파이썬 개요 : Life is Short, You Need Python.
  - PEP : 파이썬의 개선사항
  - 파이썬 : 플랫폼 독립적인 인터프리터 언어(운영체제에 상관없는)
  - 컴파일러 : 소스코드를 기계어로 먼저 번역(C,자바) , 조금 더 빠름
  - 인터프리터 : 소스코드를 실행시점에 해석(파이썬 ,스칼라), 코드가 더 쉬움
  - 파이썬은 객체 지향 동적 타이핑 언어
  - 객체지향적 언어: 실행 순서가 아닌 단위모듈(객체) 중심으로 프로그램을 작성
  - 동적타이핑 언어: 프로그램이 실행하는 시점에 프로그램이 사용해야 할 데이터에 대한 타입을 결정함
  - 갈수록 사람의 시간이 기계의 시간 보다 중요하며, 파이썬은 다양한 라이브러리를 제공하기에 써야 한다!
  
  
- (Python 1-3강) 파이썬 코딩 환경 : vscode / miniconda / jupyter /colab
  - miniconda 설치 권장
  - vscode 설치 후 cmd 에서 code. 으로 실행하기
  - 주피터 설치(이미 함)
  - 코랩 : 구글드라이브 + GCP(Google Cloud Platform) + Jupyter / 코랩에서 쓰는 메모리는 내 노트북이 아닌 원격서버/ 코랩 명령어는 주피터 명령어에 m 키가 추가 되는 느낌
  
- (Python 2-1강) Variables : 변수 및 리스트
  - 변수 : 데이터를 저장하기 위한 메모리 공간의 프로그래밍 상 이름
  - EX : a='k' 라는 명령은, a 라는 변수에 'k'라는 값을 넣으라는 뜻 -> 선언되는 순간 메모리 특정영역에 물리적인 공간이 할당됨 -> a 라는 이름을 가진 메모리 주소에 'k'를 저장 하라!
  - 데이터선언 : _abc(o), '' 안에 숫자 : str로 인식 
  - Data Type 마다 공간의 차이가 있음. 파이썬이라 그냥 썼지만 중요한 개념
  - 다이나믹 타이핑(장점) : 코드의 실행시점에 데이터의 타입을 결정하는 방법 / EX : a=1 : 정수 , a=1.5 : 실수 
  - 형변환 : type 으로 확인하고 int,float 등등 가능 / int(10.7) =10
  - 컴퓨터가 2진수 사용하는 것은 반도체가 특정 자극에 대해 전류 흐를 때와 안 흐를 때로 구분하는 것
  - 리스트: 다양한 자료형들을 포함 / 리스트 안 리스트 가능(메모리의 주소를 참조하는 것이기에)
  - copy 및 메모리 참조
    - a=[5,4,3,2,1] , b=[1,2,3,4,5] 선언 하고 b=a할 경우 a 바꿨을 때 b도 바뀜
    - 메모리 공간을 참조하는 것이기 때문. 이렇게 되지 않으려면 .copy 또는 b=a[:] 등으로 값을 복사해야 함(복사개념)
    - 2-D 부터는 b=a[:] 이용한 복사 되지않고, import copy -> copy.deepcopy() 이용
  - 패킹 : 한 변수에 여러 데이터를 넣는 것 / 언패킹 : 한 변수의 데이터를 각각의 변수로 변환 / EX : t=[1,2,3] -> a,b,c = t
  
- (Python 2-2강) Function and Console I/O : 포맷팅
  - 함수 사이 2줄 
  - 함수 안에 return 없으면 변수 연결해도 값이 None(할당이 되지 않음)
  - Data Type 다른 것들 print -> , 로 나누기
  - 포매팅
    - % : %10.1f : 10칸 공백 , 소수점 한자리 / <10s : 왼쪽정렬, >10s : 오른쪽 정렬
    - format함수 : format(x,y) , {0,1} :순서대로 / dict()형식 가능 -> key :{} , value : format(여기)
    - f-string : print(f"~~{}~~") / > 오른쪽 , < 왼쪽 , ^ 가운데 정렬 /*< 왼쪽정렬 및 나머지부분 * 로채우기 , *^20 : 20칸 채울건데 가운데정렬하고 나머지는 *로
  - 섭씨와 화씨 : input 받으면 항상 str -> 형 변환 필요
  섭씨와 화씨  : input받으면 항상 str ->형변환필요


 
